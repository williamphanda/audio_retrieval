// Code generated by MockGen. DO NOT EDIT.
// Source: handler.audio.dependencies.go

// Package audio is a generated GoMock package.
package audio

import (
	userphrase "audioretrieval/internal/entity/userphrase"
	gomock "github.com/golang/mock/gomock"
	multipart "mime/multipart"
	reflect "reflect"
)

// MockusecaseInterface is a mock of usecaseInterface interface
type MockusecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockusecaseInterfaceMockRecorder
}

// MockusecaseInterfaceMockRecorder is the mock recorder for MockusecaseInterface
type MockusecaseInterfaceMockRecorder struct {
	mock *MockusecaseInterface
}

// NewMockusecaseInterface creates a new mock instance
func NewMockusecaseInterface(ctrl *gomock.Controller) *MockusecaseInterface {
	mock := &MockusecaseInterface{ctrl: ctrl}
	mock.recorder = &MockusecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockusecaseInterface) EXPECT() *MockusecaseInterfaceMockRecorder {
	return m.recorder
}

// ProcessAudioFile mocks base method
func (m *MockusecaseInterface) ProcessAudioFile(file multipart.File, fileHeader *multipart.FileHeader, userID, phraseID int64, mimeType userphrase.MimeType) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessAudioFile", file, fileHeader, userID, phraseID, mimeType)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessAudioFile indicates an expected call of ProcessAudioFile
func (mr *MockusecaseInterfaceMockRecorder) ProcessAudioFile(file, fileHeader, userID, phraseID, mimeType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessAudioFile", reflect.TypeOf((*MockusecaseInterface)(nil).ProcessAudioFile), file, fileHeader, userID, phraseID, mimeType)
}

// CleanUpFile mocks base method
func (m *MockusecaseInterface) CleanUpFile(filePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanUpFile", filePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanUpFile indicates an expected call of CleanUpFile
func (mr *MockusecaseInterfaceMockRecorder) CleanUpFile(filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanUpFile", reflect.TypeOf((*MockusecaseInterface)(nil).CleanUpFile), filePath)
}

// RetrieveAudioFile mocks base method
func (m *MockusecaseInterface) RetrieveAudioFile(userID, phraseID int64, mimeType userphrase.MimeType) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveAudioFile", userID, phraseID, mimeType)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveAudioFile indicates an expected call of RetrieveAudioFile
func (mr *MockusecaseInterfaceMockRecorder) RetrieveAudioFile(userID, phraseID, mimeType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAudioFile", reflect.TypeOf((*MockusecaseInterface)(nil).RetrieveAudioFile), userID, phraseID, mimeType)
}
